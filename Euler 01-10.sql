
-- Euler 1
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
--Find the sum of all the multiples of 3 or 5 below 1000.
select sum(Num_3_5) from 
(
  select 
    seq4() as Num,
    case when mod(Num,5) = 0 or mod(Num,3) = 0 then Num else 0 end as Num_3_5
  from table(generator(rowcount => 1e6)) v                                    
  where Num < 1000
)
;
--233168
--------------------------------------------------------------------------------------------------------------
-- Euler 2
--Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
--1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

-- algorithm found on the internet
WITH FibonacciNumbers (RecursionLevel, FibonacciNumber, NextNumber) 
AS (
   -- Anchor member definition
   SELECT  0  AS RecursionLevel,
           0  AS FibonacciNumber,
           1  AS NextNumber
   UNION ALL
   -- Recursive member definition
   SELECT  a.RecursionLevel + 1             AS RecursionLevel,
           a.NextNumber                     AS FibonacciNumber,
           a.FibonacciNumber + a.NextNumber AS NextNumber
   FROM FibonacciNumbers a
   WHERE a.RecursionLevel < 40
)
-- Statement that executes the CTE
select sum(NextNumber)
from
(SELECT  'F' || CAST( fn.RecursionLevel AS VARCHAR) AS FibonacciOrdinal, 
        fn.FibonacciNumber,
        fn.NextNumber,
        case when mod(fn.NextNumber,2) = 0 then 1 else 0 end as IsEven
FROM FibonacciNumbers fn
where Fn.NextNumber < 4e6)
where isEven = 1; 
-- 4613732

--------------------------------------------------------------------------------------------------------------
-- Euler 3
-- The prime factors of 13195 are 5, 7, 13 and 29.
--What is the largest prime factor of the number 600851475143 ?
with divisor_list as
(
  select Num as divisor
  from  (select seq4() as Num from table(generator(rowcount => 1e6)) where  Num < sqrt(600851475143))
  where Num >1 
  and mod(600851475143, Num) = 0
) -- list of divisor
select max(divisor) from divisor_list
where divisor not in(  -- should not have divisors
  select distinct A.divisor
  from divisor_list A
    join (select max(divisor) as maxdiv from divisor_list ) B -- to limit the query
    join (select seq4() as Num from table(generator(rowcount => 1e6)) where  Num < 1e6 ) C
    where 
        C.Num < B.maxdiv 
        and c.Num >1 and divisor != num  -- avoid divide by 1 and by itself
        and mod(a.divisor, c.num) = 0    -- something divide the divisor => is not prime

);
--------------------------------------------------------------------------------------------------------------
-- Euler 4 
--A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.
select top 1
    N1.Num*N2.num as NN,
    N1.Num, 
    N2.Num,
    cast(N1.Num*N2.num as varchar(100)) as N,
    reverse(N)
    from
(select seq4() as Num from table(generator(rowcount => 1e6)) where  Num < 1e3 ) N1 cross join
(select seq4() as Num from table(generator(rowcount => 1e6)) where  Num < 1e3 ) N2
where N = reverse(N)
and N1.Num > 1 and N2.Num > 1
order by 1 desc;

--------------------------------------------------------------------------------------------------------------
-- Euler 5
-- 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
-- What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

-- Note: require some manual implementation: identify the max exponent of the primes

with divisor_list as
(
  select A.Num as dividendo, B.Num as divisore
  from  (select seq4()+1 as Num from table(generator(rowcount => 1e6)) where  Num < 21) A
  left join  (select seq4()+1 as Num from table(generator(rowcount => 1e6)) where  Num < 21) B
  on B.Num < A.Num and mod(A.Num, B.Num) = 0 and B.Num >1
) -- list of divisor
select dividendo, listagg(divisore, ', ') as scomp from divisor_list group by 1 order by 1
;
select 1*2*2*2*2*3*3*5*7*11*13*17*19;
-- 232792560

--------------------------------------------------------------------------------------------------------------
-- Euler 6
--The sum of the squares of the first ten natural numbers is,
--The square of the sum of the first ten natural numbers is,
--Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .
--Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
select sum(Num)*sum(Num) as SqSum, sum(Sqr) as SumSq, SqSum -SumSq  as Diff
from (
  select Num, Num*Num as Sqr from  (select seq4()+1 as Num from table(generator(rowcount => 1e6)) where  Num < 101) 
);

--------------------------------------------------------------------------------------------------------------
-- Euler 7
-- By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
-- What is the 10 001st prime number?
with divisor_list as
(
  select A.Num as dividendo, B.Num as divisore
  from  (select seq4()+1 as Num from table(generator(rowcount => 1e6)) where  Num < 1.5e5) A
  left join  (select seq4()+1 as Num from table(generator(rowcount => 1e6)) where  Num <= sqrt(2e5)) B
  on B.Num < A.Num and mod(A.Num, B.Num) = 0 and B.Num >1
) -- list of divisor
select max(dividendo) from
(select top 10001 dividendo from divisor_list 
where divisore is null and dividendo > 1)
;
-- 149971

--------------------------------------------------------------------------------------------------------------
-- Euler 8
/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

'73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450'

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

with bigstring as (select translate('73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450', '0123456789
 ', '0123456789') as str)
  select max(SSS) from (
    select 
    Num, 
    substr(str, Num, 13) as t, 
    ifnull(try_cast(substr(t,1,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,2,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,3,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,4,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,5,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,6,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,7,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,8,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,9,1)  as bigint), 1)*
    ifnull(try_cast(substr(t,10,1) as bigint), 1)*
    ifnull(try_cast(substr(t,11,1) as bigint), 1)*
    ifnull(try_cast(substr(t,12,1) as bigint), 1)*
    ifnull(try_cast(substr(t,13,1) as bigint), 1) as SSS
    from bigstring 
    cross join (select seq4()+1 as Num from table(generator(rowcount => 1e6)) where  Num < 1000) );

--------------------------------------------------------------------------------------------------------------
-- Euler 9
/*
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
*/

select  distinct(a*b*c)
from 
(select seq4()+1 as a from table(generator(rowcount => 1e6)) where  a < 1000)  A
cross join (select seq4()+1 as b from table(generator(rowcount => 1e6)) where  b < 1000)  B
cross join (select seq4()+1 as c from table(generator(rowcount => 1e6)) where  c < 1000)  C
where a+b+c = 1000 and a*a + b*b = c*c;

--------------------------------------------------------------------------------------------------------------
-- Euler 10
--The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
--Find the sum of all the primes below two million.
with divisor_list as
(
  select A.Num as dividendo, B.Num as divisore
  from       (select seq4()+1 as Num from table(generator(rowcount => 2e6)) where  Num < 2e6) A
  left join  (select seq4()+1 as Num from table(generator(rowcount => 2e6)) where  Num <= sqrt(2e6)) B
  on B.Num < A.Num and mod(A.Num, B.Num) = 0 and B.Num >1
) -- list of divisor
select sum(dividendo)
 from divisor_list 
where divisore is null and dividendo > 1 and dividendo < 2e6
order by dividendo
;
